# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: ci

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: "Configure and build GraphicsEngine"
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        sudo apt-get install -y libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev pkg-config

    - name: Install Clang 18 and libc++ (Linux, Clang only)
      if: runner.os == 'Linux' && matrix.c_compiler == 'clang'
      run: |
        sudo apt-get install -y wget lsb-release gnupg
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 18
        sudo apt-get install -y libc++-18-dev libc++abi-18-dev

    - name: Verify installed packages (Linux)
      if: runner.os == 'Linux'
      run: |
        dpkg -l | grep -E "libxinerama|libxcursor|xorg|libglu1-mesa|pkg-config|clang|libc++"
    
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.c_compiler == 'clang' && runner.os == 'Linux' && 'clang++-18' || matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler == 'clang' && runner.os == 'Linux' && 'clang-18' || matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        ${{ (matrix.c_compiler == 'clang' && runner.os == 'Linux') || '' }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Upload Build Directory for Tests
      uses: actions/upload-artifact@v4
      with:
        name: build-artifact-${{ matrix.os }}-${{ matrix.c_compiler }}
        path: build

  tests:
    name: "Run unit tests"
    runs-on: ${{ matrix.os }}
    needs: build  # Ensure tests run only after the build completes
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Install lcov (Linux)
        if: matrix.c_compiler == 'gcc' && runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y lcov

      - name: Download Build Directory
        uses: actions/download-artifact@v4
        with:
          name: build-artifact-${{ matrix.os }}-${{ matrix.c_compiler }}
          path: build

      - name: Set executable permissions for test binaries
        if: runner.os == 'Linux'  # Only runs on Linux
        run: chmod +x build/bin/GraphicsEngineTests

      - name: Run Tests
        working-directory: build/tests
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Capture Coverage Data
        if: matrix.c_compiler == 'gcc'
        run: |
          lcov --gcov-tool /usr/bin/gcov --capture --directory build --output-file coverage.info

      - name: Generate HTML Coverage Report
        if: matrix.c_compiler == 'gcc'
        run: |
          genhtml coverage.info --output-directory coverage_report

      - name: Upload Coverage Report as Artifact
        if: matrix.c_compiler == 'gcc'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage_report/

      - name: Upload Coverage to Codecov
        if: matrix.c_compiler == 'gcc'
        uses: codecov/codecov-action@v3
        with:
          file: coverage.info
          flags: unittests
          token: ${{ secrets.CODECOV_TOKEN }}

  Doxygen:
    name: "Generate API Documentation"
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Generate Doxygen Documentation
        run: |
          sudo apt-get install -y doxygen
          doxygen Doxyfile

      - name: Upload Doxygen Documentation Artifact
        uses: actions/upload-artifact@v4
        with:
          name: doxygen-docs
          path: docs/html
